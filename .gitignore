100 Days of code 
Assignment 1 process by 31/1
body {
    font-family: Arial, Helvetica, sans-serif;
    width: 800px;
}

a {
    margin-top: 15px;
    display: inline-block;
}

#message{
    color: red;
    font-size: 13px;
}

#optionsWrapper{
    font-size: 15px;
}

#adTitle{
    margin: 0;
}
//Check if this is actually the Google search engine and not some other google site.
function isSearch(){
    const classname = document.getElementsByClassName("RNNXgb"); //Class present on one of the divs of the Google search bar.

    if(classname != undefined && classname != null)
        return true;
    else
        return false;
}

Assignment 1 process by 1/2 
console.log("program.js loaded");
// console.log(document.location.origin);

function dynamicallyLoadScript(url) {
    var script = document.createElement("script");  
    // create a script DOM node
    script.src = url;  
    // set its src to the provided URL

*.link{
    font-size: 13px;
    margin-top: 1px;
}*/

#defaultSettings{
    margin-top: 15px;
}

.tooltip {
    position: relative;
    display: inline-block;
}
  
  /* Tooltip text */
.tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: #555;
    color: #fff;
    text-align: center;
    padding: 5px 0;
    border-radius: 6px;
  
    /* Position the tooltip text */
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -60px;
  
    /* Fade in tooltip */
    opacity: 0;
    transition: opacity 1s;

    top: 5px;
    left: 250%;
  }

  /* Tooltip arrow */
  .tooltip .tooltiptext::after {
    content: " ";
    position: absolute;
    top: 50%;
    right: 100%; /* To the left of the tooltip */
    margin-top: -5px;

import json
from time import time
import ezdict
import requests
from ezdict import EZDict
from functools import cached_property
from copy import deepcopy
import json
from bs4 import BeautifulSoup
from tqdm import tqdm
import time


class Head2Block(object):
    def __init__(self, text=None) -> None:
        if text is None:
            text = []
        self._text = text
        self._payload= EZDict(
            EZDict(
                type="heading_2",
                heading_2 = {
                    "text": self._text
                }
            )
        )

    @property
    def json(self):
        self._payload[self._payload.type].text = [
            t.json for t in self._text
        ]
        return self._payload


class Head1Block(Head2Block):
    def __init__(self, text=None) -> None:
        if text is None:
            text = []
        self._text = text
        self._payload= EZDict(
            EZDict(
                type="heading_1",
                heading_1 = {
                    "text": self._text
                }
            )
        )


class Head3Block(Head2Block):
    def __init__(self, text=None) -> None:
        if text is None:
            text = []
        self._text = text
        self._payload= EZDict(
            EZDict(
                type="heading_3",
                heading_3 = {
                    "text": self._text
                }
            )
        )


class ParagraphBlock(object):
    def __init__(self, text=None) -> None:
        if text is None:
            text = []
        self._text = text
        self._payload= EZDict(
            EZDict(
                type="paragraph",
                paragraph=EZDict(
                    text=self._text
                )
            )
        )

    @property
    def json(self):
        self._payload.paragraph.text = [
            t.json for t in self._text
        ]
        return self._payload

class Text(object):
    def __init__(self, text=None, link=None) -> None:
        if not isinstance(text, str):
            raise TypeError("text must be a string")
        self._text = text
        self._payload= EZDict({
            "type": "text",
            "text": {
                "content": self._text,
                # "link": {
                #     "type": "url",
                #     "url": link,
                #     }
                }
            })
        if link is not None:
            self._payload.text.link = {
                "type": "url",
                "url": link,
            }

    @property
    def json(self):
        return self._payload


# class 


# %%
class Client(object):
    def __init__(self, token) -> None:
        self.url = "https://www.notion.so/api/v1/"
        self.token = token
    
    def get_me(self):
        resp = requests.get(
            'https://api.notion.com/v1/users/me', 
            headers={
                "Authorization": "Bearer " + self.token,
                "Notion-Version": "2021-08-16"})
        try:
            result = EZDict(resp.json())
            return result
        except Exception as e:
            print(e)
            return resp
click==8.0.4
colorama==0.4.4
Flask==2.0.3
gunicorn==20.1.0
itsdangerous==2.1.0
Jinja2==3.0.3
MarkupSafe==2.1.0
Werkzeug==2.0.3
peewee
